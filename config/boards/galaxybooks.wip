# Qualcomm Snapdragon 8cx Gen 1 Adreno 680 Qualcomm WCN3990 Wi-Fi 5 Qualcomm Snapdragon X24 4G Bluetooth 5.0
declare -g BOARD_NAME="Samsung Galaxy Book S"
declare -g BOARD_MAINTAINER="Mateusz Krawczuk"
declare -g BOARDFAMILY="uefi-arm64"
declare -g KERNEL_TARGET="sc8180x"

declare -g BOOT_LOGO=desktop

declare -g KERNEL_MAJOR_MINOR="6.1" # Major and minor versions of this kernel.
declare -g KERNELSOURCE='https://github.com/CybrixSystems/linux.git'
declare -g KERNELBRANCH='branch:galaxy-book-s-6.1.2'
declare -g BOOT_FDT_FILE="qcom/sc8180x-samsung-galaxybook-s-w767.dtb"

declare -g KERNEL_DRIVERS_SKIP+=(driver_rtl8723cs)
declare -g KERNEL_DRIVERS_SKIP+=(driver_rtw88)

declare -g ARMBIAN_FIRMWARE_GIT_SOURCE='https://github.com/CybrixSystems/armbian-firmware.git'
# This board boots via EFI/Grub, but requires a DTB to be passed, from Grub, to the Kernel.
declare -g GRUB_CMDLINE_LINUX_DEFAULT="efi=noruntime clk_ignore_unused pd_ignore_unused"
enable_extension "grub-with-dtb" # important, puts the whole DTB handling in place.

function post_family_tweaks_bsp__samsung_w767_bsp_stuff() {

	##
	## Include certain firmware in the initrd
	##
	display_alert "Adding to bsp-cli" "${BOARD}: firmware in initrd" "info"
	declare file_added_to_bsp_destination # will be filled in by add_file_from_stdin_to_bsp_destination
	add_file_from_stdin_to_bsp_destination "/etc/initramfs-tools/hooks/w767-firmware" <<- 'FIRMWARE_HOOK'
		#!/bin/bash
		[[ "$1" == "prereqs" ]] && exit 0
		. /usr/share/initramfs-tools/hook-functions
		for f in /lib/firmware/qcom/sc8180x/SAMSUNG/W767/* ; do
			add_firmware "${f#/lib/firmware/}"
		done
		add_firmware "qcom/a680_sqe.fw" # extra one for dpu
		add_firmware "qcom/a680_gmu.bin" # extra one for gpu
	FIRMWARE_HOOK
	run_host_command_logged chmod -v +x "${file_added_to_bsp_destination}"

	## Modules, required to boot, add them to initrd; might need to be done in '.d/w767-modules' instead
	display_alert "Adding to bsp-cli" "${BOARD}: modules in initrd" "info"
	add_file_from_stdin_to_bsp_destination "/etc/initramfs-tools/modules" <<- 'EXTRA_MODULES'
		pwm_bl
		phy_qcom_qmp_pcie
		pcie_qcom
		phy_qcom
		qmp_pcie
		phy_qcom_qmp_combo
		qrtr
		phy_qcom_edp
		gpio_sbu_mux
		i2c_hid_of
		i2c_qcom_geni
		pmic_glink_altmode
		leds_qcom_lpg
		qcom_q6v5_pas  # This module loads a lot of FW blobs
		panel_edp
		panel-edp
		msm
		nvme
		usb_storage
		uas
	EXTRA_MODULES

}

# armbian-firstrun waits for systemd to be ready, but snapd.seeded might cause it to hang due to wrong clock.
function pre_customize_image__disable_snapd_seeded() {
	[[ "${DISTRIBUTION}" != "Ubuntu" ]] && return 0 # only needed for Ubuntu
	display_alert "Disabling snapd.seeded" "${BOARD}" "info"
	chroot_sdcard systemctl disable snapd.seeded.service "||" true
}
